start = (definition / requires / expression)+

expression=tree

requires = "@require" FWS WS f:filename+
		{ return { tag:"require", files:f }; }

definition = 
		pb:("@public" FWS WS)? "@view" FWS WS 
		n:keyword WS p:parameter_list? d:tree
		{ return { tag:"view", name:n, ispublic:(pb?true:false), parameters:(p?p:[]), def:d}; }

parameter_list_a=l:(keyword WS)+
		{ return l.map(function(e){ return e[1]}) }

parameter_list="(" WS ")" WS
		{ return []; }
	/	"(" WS l:parameter_list_a ")" WS
		{ return l;}

tree = n:node WS
  		{ return n; }

node = n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS "{" WS i:(strLiteral/tree/dataRef)* "}" WS
  		{ 
			return { 
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:i
			}; 
		}
	/	n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS "=" WS s:(strLiteral/tree/dataRef)
  		{
			return { 
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:s
			}; 
		}
	/	n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS
		{ 
			return {
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:[]
			}; 
		}

varName = f:valid1stchar t:validchar*
		{ return { tag:'varname', name:f + t.join('') } }

_dataRefTail = t:("." h:varName)*
		{ return t.map(function(e){ return e[1];}) }

dataRef= "$" h:varName t:_dataRefTail WS
		{ return { tag:'ref', head:h, tail:t} }
		/	"$" v:varName WS
		{ return v }

id = "#" id:keyword
	{ return { tag:"id", name:id} }
	/	"#" s:strLiteral
	{ return { tag:"id", name:s} }

classList=h:classN t:(WS classN)*
	{ return [h].concat(t.map(function(e){ return e[1]}))}

classN="." id:keyword
	{ return { tag:"class", name:id} }

attrList="[" WS a:attr+ "]"
		{ return a; }

attr = a:keyword WS "=" WS s:strLiteral WS
		{ return { tag:"attr", name:a, value:s }}

// 
filename = '"' f:(!'"' filename_chars_wsnl)+ '"' WS
		{ return f.map(function(e){ return e[1]; }).join('') }
		/	f:filename_chars+ WS
		{ return f.join(''); }

filename_chars=[a-zA-Z0-9\.\\\/_]

filename_chars_wsnl=wsnl / filename_chars

keyword=h:valid1stchar t:validchar*
		{ return h + t.join(''); }

strLiteral='"' s:validstrchar* '"' WS
		{ return s.join(''); }

// CHAR RANGES

validstrchar=(!"\"" c:.)
		{ return c;}

valid1stchar=[a-zA-Z]
validchar=[a-zA-Z0-9\-_]

validdigit=[0-9]

FWS = wsnl
WS = wsnl*

wsnl= ws / nl 
ws=[ \t]
nl= "\r\n" / "\r" / "\n"

