tree = n:node WS
  		{ return n; }

node = n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS "{" WS i:(strLiteral/tree)* "}" WS
  		{ 
			return { 
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:i
			}; 
		}
	/	n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS "=" WS s:(strLiteral/tree)
  		{
			return { 
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:s
			}; 
		}
	/	n:keyword WS id:id? WS cll:classList? WS 
		al:attrList? WS
		{ 
			return {
				tag:"node", 
				id:id?id:null,
				classes:cll?cll:[],
				name:n, 
				attr:(al?al:[]), 
				inner:[]
			}; 
		}

id = "#" id:keyword
	{ return { tag:"id", name:id} }
	/	"#" s:strLiteral
	{ return { tag:"id", name:s} }

classList=h:classN t:(WS classN)*
	{ return [h].concat(t.map(function(e){ return e[1]}))}

classN="." id:keyword
	{ return { tag:"class", name:id} }

attrList="[" WS a:attr+ "]"
		{ return a; }
attr = a:keyword WS "=" WS s:strLiteral WS
		{ return { tag:"attr", name:a, value:s }}

keyword=h:valid1stchar t:validchar*
		{ return h + t.join(''); }


strLiteral='"' s:validstrchar* '"' WS
		{ return s.join(''); }

// CHAR RANGES

validstrchar=(!"\"" c:.)
		{ return c;}


valid1stchar=[a-zA-Z]
validchar=[a-zA-Z0-9\-_]


validdigit=[0-9]

WS = wsnl*

wsnl= ws / nl 
ws=[ \t]
nl= "\r\n" / "\r" / "\n"

