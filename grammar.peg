

statements=statement+


statement=e:expression wsnl* ";" wsnl*
 { return e; }


expression = 
		// Maniraptora's constructs
		let_form 
		/ lambda_form 
		// ---
		/ type 
		// ---
		/ application 
		// Literals
		/ number / string / list / tuple
		/ identifier

// FUNCTION APPLICATION

ignore_arg = "_"
 { return { tag:"ignore_arg" }}

valid_arg = ignore_arg / expression

application_arg="#" wsnl* arg:valid_arg wsnl*
  { return arg;}

valid_callable=lambda_form / identifier

application = fun:valid_callable wsnl+ arg:valid_arg wsnl* tail:application_arg*
  { return { tag:"application", fun:fun, args:[arg].concat(tail) }; }

// LET

let_form = "let" wsnl+ i:identifier wsnl* ":=" wsnl* e:expression
 { return { tag:"let", left:i, right:e}; }

// LITERALS

number=d:validdigit+ "."? d2:validdigit*
 { return { tag:"number", value:new Number( d.join('') + '.' + d2.join('')) }; }


string="\"" v:validstrchar* "\""
 { return {tag:"string", value:v.join('') }; }


identifier=c:valid1stchar tail:validchar*
 { return { tag:"identifier", value:c + tail.join('') }; }

// functions

list_of_definitions=list
list_of_out_validators=list
lambda_form="lambda" wsnl* pars:list_of_definitions wsnl* out:list_of_out_validators wsnl* "{" wsnl* code:statements wsnl* "}"
   { return { tag:"lambda", pars:pars, out:out, code:code }; }

// tuples

tuple="(" wsnl* ")"
   { return { tag:"tag", value:[] }; }
   / "(" wsnl* head:expression wsnl* tail:collection_item* ")"
	{ return { tag:"tag", value:[head].concat(tail) }; }

// lists

collection_item="," wsnl* e:expression wsnl*
  { return e; }

list="[" wsnl* "]"
	{ return { tag:"list", value:[] }; }
  /  "[" wsnl* head:expression wsnl* tail:collection_item* "]"
	{ return { tag:"list", value:[head].concat(tail) }; }

// TYPE LITERALS

type_varargs=wsnl+ t:type
	{ return t; }

gen_varargs="," wsnl* t:type

generics=
	"<" wsnl* h:type wsnl* o:gen_varargs wsnl* ">"
   { return { tag:"generics", value:[h].concat(o) }; }

type=
	"bool" 
	{ return { tag:"basetype", name:"bool"}; } 
	/ "num" 
	{ return { tag:"basetype", name:"num"}; } 
	/ "string" 
	{ return { tag:"basetype", name:"string"}; } 
	/ "list" wsnl* g:generics
	{ return { tag:"basetype", name:"list", args:g }; } 
	/ "tuple" wsnl* g:generics
	{ return { tag:"basetype", name:"tuple", args:g}; } 
	/ "(" wsnl* l:type o:type_varargs* wsnl* "->" wsnl* r:type wsnl* ")"
	{
		return (function rec( input ){
			if(input.length === 1){
				return { tag:"arrowtype", left:input[0], right:r};
			}
			
			return { tag:"arrowtype", left:input[0], right:rec( input.slice(1) ) };
		})([ l ].concat( o ));
	}


// CHAR RANGES

validstrchar=(!"\"" c:.)
 { return c;}


valid1stchar=[a-zA-Z]
validchar=[a-zA-Z0-9]


validdigit=[0-9]

wsnl=
		ws 
   /  nl 

ws=[ \t]

nl=
    "\r\n" 
  /  "\r" 
  /  "\n"

